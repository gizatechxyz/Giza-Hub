import math

from ape.contracts.base import ContractInstance


def calculate_price(price, decimals):
    return math.exp(price / 10**decimals)


def swap_logic(weETH_amount, price, fixed_yield, predicted_yield, expiration_days):
    predicted_value_increase = (1 + predicted_yield) ** (expiration_days / 365)
    fixed_value_increase = fixed_yield / price
    margin = predicted_value_increase - fixed_value_increase
    weight = 0.5 - (margin * 2)
    if weight < 0:
        weight = 0
    if weight > 1:
        weight = 1
    return int(weETH_amount * weight), weight


def no_limit_order_params():
    return {
        "limitRouter": "0x0000000000000000000000000000000000000000",
        "epsSkipMarket": 0,
        "normalFills": [],
        "flashFills": [],
        "optData": 0,
    }


def input_tuple(token: ContractInstance, amount):
    return {
        "tokenIn": token.address,
        "netTokenIn": amount,
        "tokenMintSy": token.address,
        "pendleSwap": "0x0000000000000000000000000000000000000000",
        "swapData": [
            0,
            "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5",
            "0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea00000000000000000000000057e114b691db790c35207b2e685d4a43181e606100000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a0000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c82191df821c198600499aa1f0031b1a7514d7a7d900020000000000000000063900000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea000000000000000000000000e07f9d810a48ab5c3c914ba3ca53af14e4491e8a00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8c2aa60465bffa1a88f5ba471a59ca0435c3ec5c100020000000000000000062c000000000000000000000000e07f9d810a48ab5c3c914ba3ca53af14e4491e8a000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000001d33199762a4dc5437000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000408a625596f47314e1fd4a6cbce84c4a8695ba3f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000057e114b691db790c35207b2e685d4a43181e6061000000000000000000000000000000000000000000000000000000002019cb7c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000025c0de929f89e00000000000000240123430cade6309500000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea00000000000000000000000057e114b691db790c35207b2e685d4a43181e6061000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000023f7ebacb5e1f303fd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e97b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223533382e35222c22416d6f756e744f7574555344223a223533372e35383735383336333936303335222c22526566657272616c223a22222c22466c616773223a332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225a37544c514a6f71796250556a58336d62437037433763636d352b65735a375a38797270416939576772727953652b66662f3541564c7866574a4b6433462b7759574168666c674e35484b794c756a34537a534b7966637a443668692f2b544a4f474147306a47637a3767366f5356617363714c6a7568785235466a6a387630773741714f6b4f527a6264466b6c495a6e33766a345a316446464f6b2b6d7a474647776336483754577a507a4d4b663878654766573154637a74674a582f5771454f74674f58457249713235764868303371635154336457445938686f6450744f4c68467832383834716635396a2b356d724a717a66346957646272474c56434e346546414639765031384a7951797a4a536f5153306c344170743734377832594e69394636724974697453594148494e575636656b6f6d785933476573324b516a6549376833756b74427538536130396757496c673d3d227d7d0000000000000000000000000000000000000000000000",
            False,
        ],
    }


def guess_out_tuple():
    return {
        "guessMin": 0,
        "guessMax": int(1e30),
        "guessOffchain": 0,
        "maxIteration": 256,
        "eps": 500000000000000,
    }
